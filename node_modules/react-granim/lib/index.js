var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropsType from 'prop-types';
import granim from 'granim';

var Granim = function (_Component) {
  _inherits(Granim, _Component);

  function Granim() {
    _classCallCheck(this, Granim);

    return _possibleConstructorReturn(this, (Granim.__proto__ || Object.getPrototypeOf(Granim)).apply(this, arguments));
  }

  _createClass(Granim, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.granim = new granim(Object.assign({}, this.config, this.props));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          id = _props.id,
          style = _props.style;

      return React.createElement('canvas', { id: id, style: style || this.style });
    }
  }, {
    key: 'config',
    get: function get() {
      // default
      return {
        element: '#' + this.props.id,
        opacity: [1, 1],
        states: _defineProperty({}, this.props.defaultStateName, {
          gradients: [['#EB3349', '#F45C43'], ['#FF8008', '#FFC837'], ['#4CB8C4', '#3CD3AD'], ['#24C6DC', '#514A9D'], ['#FF512F', '#DD2476'], ['#DA22FF', '#9733EE']],
          transitionSpeed: 2000
        })
      };
    }
  }, {
    key: 'style',
    get: function get() {
      return {
        position: 'absolute',
        display: 'block',
        width: '100%',
        height: '100%',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
  }]);

  return Granim;
}(Component);

Granim.propsType = {
  id: PropsType.string,
  name: PropsType.string,
  elToSetClassOn: PropsType.string,
  direction: PropsType.oneOf('diagonal', 'left-right', 'top-bottom', 'radial'),
  isPausedWhenNotInView: PropsType.bool,
  opacity: PropsType.arrayOf(PropsType.number).isRequired,
  stateTransitionSpeed: PropsType.number,
  defaultStateName: PropsType.string,
  states: PropsType.object.isRequired
};
Granim.defaultProps = {
  id: 'granim-canvas-' + Math.random().toString(36).substring(2),
  defaultStateName: 'default-state'
};
export default Granim;